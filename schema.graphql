type CollectionEntity @entity {
  id: ID!
  blockNumber: BigInt
  createdAt: DateTime!
  currentOwner: String!
  issuer: String!
  max: Int! # totalSupply
  meta: MetadataEntity
  burned: Boolean
  metadata: String
  name: String
  nfts: [NFTEntity!] @derivedFrom(field: "collection")
  symbol: String
  updatedAt: DateTime!
  type: CollectionType!
}

type NFTEntity @entity {
  id: ID!
  blockNumber: BigInt
  burned: Boolean!
  collection: CollectionEntity!
  createdAt: DateTime!
  currentOwner: String!
  events: [Event!] @derivedFrom(field: "nft")
  hash: String! @index
  issuer: String!
  meta: MetadataEntity
  metadata: String
  name: String
  price: BigInt
  royalty: Int
  sn: String!
  count: BigInt!
  updatedAt: DateTime!
}

type MetadataEntity @entity {
  id: ID!
  name: String
  description: String
  image: String
  attributes: [Attribute!]
  animationUrl: String
  type: String
}

type Attribute @jsonField {
  display: String
  trait: String
  value: String!
}

interface EventType {
  id: ID!
  blockNumber: BigInt
  timestamp: DateTime!
  caller: String!
  currentOwner: String
  interaction: Interaction!
  meta: String!
}

type Event implements EventType @entity {
  id: ID!
  blockNumber: BigInt
  timestamp: DateTime!
  caller: String!
  currentOwner: String! # currentOwner
  interaction: Interaction!
  meta: String!
  nft: NFTEntity!
}

enum CollectionType {
  ERC721
  ERC1155
}

enum Interaction {
  MINT
  MINTNFT
  LIST
  UNLIST
  BUY
  SEND
  CONSUME
}


# type Transfer @entity {
#   id: ID!
#   token: Token!
#   from: Owner
#   to: Owner
#   timestamp: BigInt!
#   block: Int!
#   transactionHash: String!
# }

# type Contract @entity {
#   id: ID!
#   name: String
#   symbol: String
#   totalSupply: BigInt
#   mintedTokens: [Token!]! @derivedFrom(field: "contract")
# }

# type Token @entity {
#   id: ID!
#   owner: Owner
#   uri: String
#   transfers: [Transfer!]! @derivedFrom(field: "token")
#   contract: Contract
# }